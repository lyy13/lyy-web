JavaScript框架库的一种
可以解决js兼容问题
写得少做得多

获取按钮用$("#btn")；$(".btn")；$("div")；$("*")
选择标签上的类$(div.use)
多条件选择器：$("span,p,li,div")可以选择多个元素

层级选择器：
后代选择器$("div p")div中的所以p标签
子代选择器$("div>span")div中所有的直接span标签
$(this).children("ul").show();让孩子里的ul显示

奇偶选择器
：even偶数选择器$("ul>li：even")指ul中偶数的li
：odd奇数选择器

索引选择器
：eq（x）：获取索引为x的标签
：gt（x）：获取索引大于x的标签
：lt（x）：获取索引小于x的标签



DOM中的顶级对象：document---页面中的顶级对象
bom中的顶级对象：window---浏览器中的顶级对象
jQuery中的顶级对象：jQuery或者$

$(window).load(function(){})=window.onload：页面内容都加载完毕后执行
$(document).ready(function(){})=$(function)页面基本标签加载完毕后可以执行

DOM对象转换为jQuery对象-》$(DOM对象)

jQuery对象转换为DOM对象：
1.$(对象).get（0）
2.$(对象)【0】


设置样式$("").css("backgroupcolor","red")或者.css({"opacity":"0.5",})（透明度）
.val（）获取value的方法，也可以获取文本域的内容；下拉框val可以改变某一项被选中
.val（内容）设置value的方法
.html()方法：设置标签中间显示其他标签和内容=innerHTML
.text（）方法：设置标签中间显示的文本=innerText
.index（）方法：获取索引值
.siblings（"li"）li的兄弟节点
.find（）方法，针对当前的元素找里面其他一些元素
.stop（）停止动画

.addClass（"类1 类2"）增加类样式
.removeClass（）移除类样式；什么都不写，则移除所有类
.hasClass（）是否应用了该类
.toggleClass（）切换类

获得兄弟元素的几个方法：
next（）；当前元素之后的紧邻着的第一个兄弟元素（下一个）
nextAll（）；当前元素之后的所以兄弟元素
prev（）；当前元素之前的紧邻着的兄弟元素（上一个）
prevAll（）；当前元素之前的所有兄弟元素
siblings（）；当前元素所有的兄弟元素（自己除外）

.hide()隐藏；里面可以写参数：
1.数字，1000代表1秒，指隐藏的时间
2.字符串，slow/normal/fast
.show（）显示，参数与hide一样

.slideUp（）滑入
.slideDown（）滑出
.slideToggle（）切换滑入滑出；参数与hide一样

.fadeIn（）淡入
.fadeOut（）淡出
fadeToggle（）切换淡入淡出；参数与hide一样


链式编程：对象.方法.方法……（代码返回的是对象才可以）

arguments.callee相当于递归


animate（）方法参数
1.键值对--对象
2.时间
3.匿名函数--回调函数
如：animate（{"width":"200px"}，1000，function（）{}）


动态创建元素
1.$("标签的代码")
2.对象.html（“标签的代码”）；不用追加，已经相当于append

.append（创建的元素）把创建的元素追加到页面中（如果是已有的元素，则是移到另外的地方）
创建的元素.appendTo（要追加的元素）
.prepend（创建的元素）把元素插入到某个元素的前面（还是调用该方法的子元素）
.after（创建的元素）把元素插入到当前元素的后面（是调用该方法的兄弟元素）
.before（创建的元素）把元素插入到当前元素的前面（是调用该方的兄弟元素）
.empty（）清空元素中的内容=.html（""）
.remove（）清空元素本身--自杀
.clone（）复制这个元素


.attr（"href","#"）可以设置属性值，两个参数一个属性名，一个属性值
.attr（）可以获取属性值，一个参数就是属性名字

.prop（"属性名"，"属性值"）设置属性
$("x:checkbox").prop("checked",true);全选

.offset（）设置left和top的值
.offset（）.left，.offset（）.top获取left和top的值
.scrollLeft（）..scrollTop（）获取滚动距离


.bind（{"事件名字"：事件处理的匿名函数，……}）多个事件用空格隔开可以用同一个函数
.delegate（"元素","事件名字","匿名函数"）绑定事件；为调用对象中的某个元素绑定事件
.on（"事件名字"，事件处理的匿名函数）绑定事件
.on（"事件名字"，要绑定的元素，事件处理的匿名函数）父级元素调用
最好用on绑定


解绑事件：
.off（解绑事件名字）
.unbind（解绑的事件名字）
.undelegate（被绑定元素，事件名字）
如果父级元素和子级元素是通过正常的方式绑定事件，则解绑父级元素时，子级元素不会被解绑
如果子级元素通过delegate绑定事件，用父级元素off解绑事件时，父级元素和子级元素会同时被解绑
最好对应绑定使用
.off（解绑事件名字，"**"）解绑子级元素事件
.off（）移除父级及子级事件


触发事件：
.click（）；
.trigger（"事件名字"）；
.triggerHandle（"事件名字"）；
第一种和第二种是一样的，都会触发浏览器的默认事件
但是第三种不会触发


delegateTarget-》调用事件的元素
currentTarget-》事件绑定的元素
Target-》触发的元素


取消事件冒泡：直接return false；还可以取消浏览器的默认事件（如连接的跳转）


隐式迭代.each（function（index，element）{}）；


jQuery插件多使用（jQuery插件之家）还有
jQueryui：
1.引入样式文件
2.引入jQuery
3.引入js文件
4.使用功能






